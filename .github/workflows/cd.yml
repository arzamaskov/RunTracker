name: CD (Deploy)

on:
  push:
    tags: [ "*" ]

concurrency:
  group: deploy-prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/arzamaskov/run-app
  DOCKER_BUILDKIT: "1"

jobs:
  tests:
    name: PHP tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: run_app_test
          MYSQL_USER: app
          MYSQL_PASSWORD: secret
        ports: [ 3306:3306 ]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -psecret"
          --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      APP_ENV: testing
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: run_app_test
      DB_USERNAME: app
      DB_PASSWORD: secret
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
          extensions: mbstring, intl, redis, pdo_mysql
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-
      - name: Composer install
        run: composer install --no-interaction --no-progress --prefer-dist
      - name: App key for tests
        run: |
          [ -f .env ] || cp .env.example .env
          php artisan key:generate
      - name: Clear caches
        run: |
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan event:clear
      - name: PHPUnit
        run: php artisan test --colors=always

  build:
    name: Build & Push images (app & web)
    runs-on: ubuntu-latest
    needs: [tests]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # APP: всегда пушим :sha
      - name: Build & push APP (:sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/php/Dockerfile
          target: prod
          push: true
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app
          tags: ${{ env.IMAGE_NAME }}:app-${{ github.sha }}

      # APP: на тегах пушим :version и :latest
      - name: Build & push APP (:version, :latest)
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/php/Dockerfile
          target: prod
          push: true
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app
          tags: |
            ${{ env.IMAGE_NAME }}:app-${{ github.ref_name }}
            ${{ env.IMAGE_NAME }}:app-latest

      # WEB: всегда пушим :sha
      - name: Build & push WEB (:sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/php/Dockerfile
          target: web
          push: true
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web
          tags: ${{ env.IMAGE_NAME }}:web-${{ github.sha }}

      # WEB: на тегах пушим :version и :latest
      - name: Build & push WEB (:version, :latest)
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/php/Dockerfile
          target: web
          push: true
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web
          tags: |
            ${{ env.IMAGE_NAME }}:web-${{ github.ref_name }}
            ${{ env.IMAGE_NAME }}:web-latest

  deploy:
    name: Deploy to PROD (only on tags)
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 20
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:     ${{ secrets.PROD_SSH_HOST }}
          port:     ${{ secrets.PROD_SSH_PORT }}
          username: ${{ secrets.PROD_SSH_USER }}
          key:      ${{ secrets.PROD_SSH_KEY }}
          command_timeout: 20m
          envs: GITHUB_REF_NAME
          script: |
            set -euo pipefail
            cd /opt/run-app

            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            docker compose -f docker-compose.prod.yml config -q

            export APP_TAG="${GITHUB_REF_NAME}"
            export WEB_TAG="${GITHUB_REF_NAME}"

            APP_TAG="$APP_TAG" WEB_TAG="$WEB_TAG" docker compose -f docker-compose.prod.yml pull
            APP_TAG="$APP_TAG" WEB_TAG="$WEB_TAG" docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker compose -f docker-compose.prod.yml ps

            docker compose -f docker-compose.prod.yml exec -T app php artisan down || true
            docker compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
            docker compose -f docker-compose.prod.yml exec -T app php artisan optimize:clear
            docker compose -f docker-compose.prod.yml exec -T app php artisan config:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan route:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan event:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan storage:link || true
            docker compose -f docker-compose.prod.yml exec -T app php artisan up

            docker image prune -f

