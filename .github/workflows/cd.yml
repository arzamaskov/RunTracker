name: CD (Deploy)

on:
  push:
    tags: [ "*" ]

concurrency:
  group: deploy-prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/arzamaskov/runtracker
  DOCKER_BUILDKIT: "1"

jobs:
  tests:
    name: PHP tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: run_app_test
          POSTGRES_USER: laravel
          POSTGRES_PASSWORD: secret
        ports: [ 5432:5432 ]
        options: >-
          --health-cmd="pg_isready -U laravel"
          --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_DATABASE: run_app_test
      DB_USERNAME: laravel
      DB_PASSWORD: secret
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
          extensions: mbstring, intl, redis, pdo_pgsql
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-
      - name: Composer install
        run: composer install --no-interaction --no-progress --prefer-dist
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install npm dependencies
        run: npm ci
      - name: Build frontend
        run: npm run build
      - name: App key for tests
        run: |
          [ -f .env ] || cp .env.example .env
          php artisan key:generate
      - name: Clear caches
        run: |
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan event:clear
      - name: PHPUnit
        run: php artisan test --colors=always

  build:
    name: Build & Push images (app & web)
    runs-on: ubuntu-latest
    needs: [tests]
    timeout-minutes: 30
    env:
      CACHE_APP: ghcr.io/arzamaskov/runtracker:cache-app
      CACHE_WEB: ghcr.io/arzamaskov/runtracker:cache-web
    steps:
      - uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Безопасный тег (на случай "грязных" символов в git tag)
      - name: Compute SAFE_TAG
        if: startsWith(github.ref, 'refs/tags/')
        id: tag
        shell: bash
        run: |
          RAW="${GITHUB_REF_NAME}"
          SAFE=$(printf "%s" "$RAW" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._-]+/-/g')
          echo "safe=$SAFE" >> "$GITHUB_OUTPUT"
          echo "SAFE_TAG=$SAFE"

      # APP: всегда пушим :sha
      - name: Build & push APP (:sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/production/Dockerfile
          target: prod
          push: true
          cache-from: |
            type=registry,ref=${{ env.CACHE_APP }}
            type=gha,scope=app
          cache-to: |
            type=registry,ref=${{ env.CACHE_APP }},mode=max,compression=zstd
            type=gha,mode=max,scope=app
          tags: ${{ env.IMAGE_NAME }}:app-${{ github.sha }}

      - name: Verify APP :sha exists
        run: docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:app-${{ github.sha }}

      # APP: на тегах пушим :version-safe и :latest
      - name: Build & push APP (:version-safe, :latest)
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/production/Dockerfile
          target: prod
          push: true
          cache-from: |
            type=registry,ref=${{ env.CACHE_APP }}
            type=gha,scope=app
          cache-to: |
            type=registry,ref=${{ env.CACHE_APP }},mode=max,compression=zstd
            type=gha,mode=max,scope=app
          tags: |
            ${{ env.IMAGE_NAME }}:app-${{ steps.tag.outputs.safe }}
            ${{ env.IMAGE_NAME }}:app-latest

      # WEB: всегда пушим :sha
      - name: Build & push WEB (:sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/production/Dockerfile
          target: web
          push: true
          cache-from: |
            type=registry,ref=${{ env.CACHE_WEB }}
            type=gha,scope=web
          cache-to: |
            type=registry,ref=${{ env.CACHE_WEB }},mode=max,compression=zstd
            type=gha,mode=max,scope=web
          tags: ${{ env.IMAGE_NAME }}:web-${{ github.sha }}

      - name: Verify WEB :sha exists
        run: docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:web-${{ github.sha }}

      # WEB: на тегах пушим :version-safe и :latest
      - name: Build & push WEB (:version-safe, :latest)
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/production/Dockerfile
          target: web
          push: true
          cache-from: |
            type=registry,ref=${{ env.CACHE_WEB }}
            type=gha,scope=web
          cache-to: |
            type=registry,ref=${{ env.CACHE_WEB }},mode=max,compression=zstd
            type=gha,mode=max,scope=web
          tags: |
            ${{ env.IMAGE_NAME }}:web-${{ steps.tag.outputs.safe }}
            ${{ env.IMAGE_NAME }}:web-latest

  deploy:
    name: Deploy to PROD (only on tags)
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 20
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:     ${{ secrets.PROD_SSH_HOST }}
          port:     ${{ secrets.PROD_SSH_PORT }}
          username: ${{ secrets.PROD_SSH_USER }}
          key:      ${{ secrets.PROD_SSH_KEY }}
          command_timeout: 20m
          envs: GITHUB_SHA,IMAGE_NAME
          script: |
            set -euo pipefail
            cd /opt/run-app

            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # ЕДИНЫЙ путь к образам, как в build
            export IMAGE_NAME="${IMAGE_NAME:-ghcr.io/arzamaskov/runtracker}"

            # Деплой immutable-образами по SHA
            export APP_TAG="${GITHUB_SHA}"
            export WEB_TAG="${GITHUB_SHA}"

            APP_IMAGE="${IMAGE_NAME}:app-${APP_TAG}"
            WEB_IMAGE="${IMAGE_NAME}:web-${WEB_TAG}"
            echo "Deploy by SHA:"
            echo "  $APP_IMAGE"
            echo "  $WEB_IMAGE"

            # Preflight: убедимся, что образы есть в GHCR
            docker manifest inspect "$APP_IMAGE" >/dev/null || { echo "MISSING: $APP_IMAGE"; exit 1; }
            docker manifest inspect "$WEB_IMAGE" >/dev/null || { echo "MISSING: $WEB_IMAGE"; exit 1; }

            docker compose -f docker-compose.prod.yml config -q

            docker compose -f docker-compose.prod.yml down || true
            IMAGE_NAME="$IMAGE_NAME" APP_TAG="$APP_TAG" WEB_TAG="$WEB_TAG" docker compose -f docker-compose.prod.yml pull
            IMAGE_NAME="$IMAGE_NAME" APP_TAG="$APP_TAG" WEB_TAG="$WEB_TAG" docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker compose -f docker-compose.prod.yml ps

            # Мейнтенанс/миграции/кэш
            docker compose -f docker-compose.prod.yml exec -T app php artisan down || true
            docker compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
            docker compose -f docker-compose.prod.yml exec -T app php artisan optimize:clear
            docker compose -f docker-compose.prod.yml exec -T app php artisan config:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan route:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan event:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan storage:link || true
            docker compose -f docker-compose.prod.yml exec -T app php artisan up

            docker image prune -f
